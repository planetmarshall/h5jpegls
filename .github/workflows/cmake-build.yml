name: cmake-build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  linux-build:
    strategy:
      matrix:
        image: ['conanio/gcc11-ubuntu16.04', 'conanio/clang13-ubuntu16.04']
        libcxx: [libstdc++11, libc++]
        plugin: [module, shared, static]
        exclude:
          - image: 'conanio/gcc11-ubuntu16.04'
            libcxx: libc++
        include:
          - image: 'conanio/gcc11-ubuntu16.04'
            profile: gcc11
          - image: 'conanio/clang13-ubuntu16.04'
            libcxx: libc++
            profile: clang13-libc++
          - image: 'conanio/clang13-ubuntu16.04'
            libcxx: libstdc++11
            profile: clang13-libstdc++

    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
      options: '--user=root'
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: set environment variables
        run: |
          bash .github/workflows/set_env_vars.sh ${{ matrix.plugin }}
      - name: create conan cache keys
        run: |
          conan config install .github/workflows/conan
          CONAN_ARGS="
            --profile ${{ matrix.profile }} \
            --build missing
          "
          conan lock create conanfile.py ${CONAN_ARGS} ${CONAN_OPTIONS}
      - name: get conan cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/conan/.conan/data
            !/home/conan/.conan/data/**/conan_sources.tgz
          key: conan-${{ matrix.profile }}-${{ hashFiles('conan.lock') }}
      - name: Build Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: conan install . --install-folder build --build missing --build hdf5 ${CONAN_OPTIONS}
      - name: install conan dependencies
        run: |
          conan install . \
            --install-folder build \
            --lockfile conan.lock \
            --build missing
      - name: build with cmake
        run: |
          conan build . --build-folder build
      - name: run tests
        run: |
          cd build
          if [ "${{ matrix.plugin }}" = "module" ]; then
            export HDF5_PLUGIN_PATH=$(pwd)/plugins
          fi
          ctest --extra-verbose --no-tests=error
      - name: build package
        if: ${{ matrix.plugin == 'module' }}
        run: |
          cpack -G "DEB;TXZ" -B $(pwd)/package --config build/CPackConfig.cmake
      - name: upload package
        if: ${{ matrix.plugin == 'module' }}
        uses: actions/upload-artifact@v2
        with:
          name: linux-${{ matrix.profile }}-package
          path: package/h5jpegls-*
  linux-test:
    needs: linux-build
    runs-on: ubuntu-20.04
    container:
      image: algodynamic/hdf5:latest
      options: '--user=root'
    steps:
    - name: checkout repository
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: download linux package
      uses: actions/download-artifact@v2
      with:
        name: linux-gcc11-package
        path: package
    - name: install linux package
      run: |
        PACKAGE_NAME=$(find package -name *.deb)
        dpkg -i ${PACKAGE_NAME}
    - name: run tests
      run: |
        pip install pytest
        pytest --log-cli-level=INFO -rvP test.py
      working-directory: test

  windows-build:
    strategy:
      matrix:
        profile: [vs2019, vs2019-clang]
        plugin: [static, shared, module]
    runs-on: windows-2019
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: setup python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: set environment variables
        run: |
          bash .github/workflows/set_env_vars.sh ${{ matrix.plugin }}
      - name: create conan cache keys
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade conan
          CONAN_ARGS="
            --profile .github/workflows/conan/profiles/${{ matrix.profile }} \
            --build missing"
          conan lock create conanfile.py ${CONAN_ARGS} ${CONAN_OPTIONS}
        shell: bash
      - name: get conan cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.conan/data
            !~/.conan/data/**/conan_sources.tgz
          key: conan-${{ matrix.profile }}-${{ hashFiles('conan.lock') }}
      - name: install conan dependencies
        run: |
          conan install . \
            --install-folder build \
            --lockfile conan.lock \
            --build missing \
            --generator virtualrunenv
        shell: bash
      - name: build with cmake
        run: |
          conan build . --build-folder build
        shell: bash
      - name: run tests
        run: |
          cd build
          $build_folder=Get-Location
          $env:HDF5_PLUGIN_PATH=Join-Path -Path $build_folder -ChildPath plugins
          .\activate_run.ps1
          ctest --extra-verbose --no-tests=error
      - name: build package
        if: ${{ matrix.plugin == 'module' }}
        run: |
          CMAKE="$(which cmake)"
          CPACK="$(dirname "${CMAKE}")/cpack"
          echo "${CPACK}"
          "${CPACK}" -G "NSIS;ZIP" -B package --config build/CPackConfig.cmake
        shell: bash
      - name: upload package
        if: ${{ matrix.plugin == 'module' }}
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.profile }}-package
          path: package/h5jpegls-*
  windows-test:
    needs: windows-build
    runs-on: windows-2019
    defaults:
      run:
        shell: bash
    steps:
    - name: checkout repository
      uses: actions/checkout@v2
      with:
        lfs: true
    - uses: actions/download-artifact@v2
      with:
        name: windows-vs2019-package
        path: package
    - name: setup python 3
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: setup msys
      uses: msys2/setup-msys2@v2
      with:
        install: unzip
    - name: install windows package
      run: |
        .\h5jpegls-1.0.0-win64.exe /S
      working-directory: package
      shell: cmd
    - name: download HDF5 for Windows
      run: |
        wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.1/bin/windows/hdf5-1.12.1-Std-win10_64-vs16.zip
        unzip hdf5-1.12.1-Std-win10_64-vs16.zip
      shell: msys2 {0}
    - name: Install HDF5 for Windows
      run: msiexec /i "hdf\HDF5-1.12.1-win64.msi" /qn
      shell: cmd
    - name: update PATH
      run: |
        echo "C:/Program Files/HDF_Group/HDF5/1.12.1/bin" >> $GITHUB_PATH
    - name: Test HDF5 install
      run: |
        h5dump --version
    - name: run tests
      run: |
        pip install pytest h5py
        pytest --log-cli-level=INFO -vrP test.py
      working-directory: test

  macos-build:
    strategy:
      matrix:
        plugin: [module, shared, static]
        profile: [apple-clang13]

    runs-on: macos-11
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: set environment variables
        run: |
          bash .github/workflows/set_env_vars.sh ${{ matrix.plugin }}
      - name: setup python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: create conan cache keys
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade conan
          conan config install .github/workflows/conan
          CONAN_ARGS="
            --profile ${{ matrix.profile }} \
            --build missing
          "
          conan lock create conanfile.py ${CONAN_ARGS} ${CONAN_OPTIONS}
      - name: get conan cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.conan/data
            !~/.conan/data/**/conan_sources.tgz
          key: conan-${{ matrix.profile }}-${{ hashFiles('conan.lock') }}
      - name: install conan dependencies
        run: |
          conan install . \
            --install-folder build \
            --lockfile conan.lock \
            --build missing
      - name: build with cmake
        run: |
          conan build . --build-folder build
      - name: run tests
        run: |
          cd build
          if [ "${{ matrix.plugin }}" = "module" ]; then
            export HDF5_PLUGIN_PATH=$(pwd)/plugins
          fi
          ctest --extra-verbose --no-tests=error
      - name: build package
        if: ${{ matrix.plugin == 'module' }}
        run: |
          cpack -G TXZ -B $(pwd)/package --config build/CPackConfig.cmake
      - name: upload package
        if: ${{ matrix.plugin == 'module' }}
        uses: actions/upload-artifact@v2
        with:
          name: macos-${{ matrix.profile }}-package
          path: package/h5jpegls-*

  macos-test:
    needs: macos-build
    runs-on: macos-11
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: setup python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: install HDF5
        run: |
          brew install hdf5
      - name: download macos package
        uses: actions/download-artifact@v2
        with:
          name: macos-apple-clang13-package
          path: package
      - name: install macos package
        run: |
          PACKAGE_NAME=$(find package -name *.xz)
          tar -xvf ${PACKAGE_NAME} --strip-components=1
          sudo cp -r usr /
      - name: run tests
        run: |
          mkdir -p ~/bin
          ln -s /usr/local/bin/h5repack ~/bin/h5repack-shared
          pip install pytest h5py
          pytest --log-cli-level=INFO -rvP test.py
        working-directory: test
